# 232. Tiny Url
# 中文English
# Given a long url, make it shorter.

# You should implement two methods:

# longToShort(url) Convert a long url to a short url which starts with http://tiny.url/.
# shortToLong(url) Convert a short url to a long url.
# You can design any shorten algorithm, the judge only cares about two things:

# The short key's length should equal to 6 (without domain and slash). And the acceptable characters are [a-zA-Z0-9]. For example: abcD9E
# No two long urls mapping to the same short url and no two short urls mapping to the same long url.
# Example
# Example 1:

# Input: shortToLong(longToShort("http://www.lintcode.com/faq/?id=10"))
# Output: "http://www.lintcode.com/faq/?id=10"
# Explanation: 
#   When longToShort() called, you can return any short url.
#   For example, "http://tiny.url/abcdef".
#   And "http://tiny.url/ABCDEF" is ok as well.
# Example 2:

# Input:
#   shortToLong(longToShort("http://www.lintcode.com/faq/?id=10"))
#   shortToLong(longToShort("http://www.lintcode.com/faq/?id=10"))
# Output:
#   "http://www.lintcode.com/faq/?id=10"
#   "http://www.lintcode.com/faq/?id=10"
from random import randint
class TinyUrl:
    """
    @param: url: a long url
    @return: a short url starts with http://tiny.url/
    """
    def __init__(self):
        self.shorts = {}
        # self.longs = {}
        
    def longToShort(self, url):
        # write your code here
        # if url in self.longs:
        #     return self.longs[url]
        d = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ1234567890'
        while 1:
            short = ''.join([d[randint(0,61)] for i in range(6)])
            if short not in self.shorts:
                break
        
        # self.longs[url] = short
        res = 'http://tiny.url/' + short
        self.shorts[res] = url
        return res
        
    """
    @param: url: a short url starts with http://tiny.url/
    @return: a long url
    """
    def shortToLong(self, url):
        # write your code here
        # print('aaa ', url)
        return self.shorts[url] 

obj = TinyUrl()
print(obj.shortToLong(obj.longToShort("http://www.lintcode.com/faq/?id=10")))


# 522
# As a follow up for Tiny URL, we are going to support custom tiny url, so that user can create their own tiny url. That is to say, you need to implement one more createCustom than 232. Tiny Url.

# You should implement three methods:

# longToShort(url) Convert a long url to a short url which starts with http://tiny.url/.
# shortToLong(url) Convert a short url to a long url.
# createCustom(url, key) Set the short url of a long url to http://tiny.url/ + key
# You can design any shorten algorithm, the judge only cares about:

# The length of short key' generated by longToShort should equal to 6 (without domain and slash). And the acceptable characters are [a-zA-Z0-9]. For example: abcD9E
# No two long urls mapping to the same short url and no two short urls mapping to the same long url.
# If createCustom can not meet users' expectment, return "error"; otherwise return the short url.
# Example
# Example 1:

# Input:
#   createCustom("http://www.lintcode.com/", "lccode")
#   shortToLong("http://tiny.url/lccode")
#   createCustom("http://www.lintcode.com/", "ltcode")
# Output:
#   "http://tiny.url/lccode"
#   "http://www.lintcode.com/"
#   "error"
# Example 2:

# Input:
#   longToShort("http://www.lintcode.com/")
#   createCustom("http://www.lintcode.com/", "ltcode")
# Output:
#   "http://tiny.url/abcdef"    => This answer is not unique.
#   "error"
# Explanation:
#   Although it is almost impossible:
#   if your longToShort() just returns "http://tiny.url/ltcode",  
#   your createCustom() should return "http://tiny.url/ltcode".
from random import randint
class TinyUrl2:
    """
    @param: long_url: a long url
    @param: key: a short key
    @return: a short url starts with http://tiny.url/
    """
    def __init__(self):
        self.shorts = {}
        self.longs = {}
        
    def createCustom(self, long_url, key):
        # write your code here
        short = 'http://tiny.url/' + key
        
        # if long_url in self.longs and short in self.shorts:
        if long_url in self.longs and self.longToShort(long_url) == short:
            return short

        if long_url in self.longs or short in self.shorts:
            return "error"
            
        self.longs[long_url] = short    
        self.shorts[short] = long_url
        # print('longs: ', self.longs)
        # print('shorts: ', self.shorts)
        return short
        
    """
    @param: long_url: a long url
    @return: a short url starts with http://tiny.url/
    """
    def longToShort(self, long_url):
        # write your code here
        if long_url in self.longs:
            return self.longs[long_url]
            
        d = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ1234567890'
        while 1:
            short = ''.join([d[randint(0,61)] for i in range(6)])
            if short not in self.shorts:
                break
        
        # self.longs[url] = short
        res = 'http://tiny.url/' + short
        self.longs[long_url] = res
        self.shorts[res] = long_url
        # print('2 longs: ', self.longs)
        # print('2 shorts: ', self.shorts)
        return res
        
    """
    @param: short_url: a short url starts with http://tiny.url/
    @return: a long url
    """
    def shortToLong(self, short_url):
        # write your code here
        # print(short_url)
        return self.shorts.get(short_url, 'error')
        
turl2 = TinyUrl2()
print(turl2.createCustom("http://www.lintcode.com/", "lccode"))
print(turl2.longToShort("http://www.lintcode.com/problem/"))
print(turl2.shortToLong("http://tiny.url/lccode"))
print(turl2.createCustom("http://www.lintcode.com/", "lc"))
print(turl2.createCustom("http://www.lintcode.com/en/ladder/", "lccode"))